name: Rust CI & Release

on:
  push:
    # 常规情况：push 到 main 分支时触发
    branches:
      - main
    # 推送 tag（例如 v1.2.3）时也触发
    tags:
      - 'v*'

jobs:
  ci:
    runs-on: ubuntu-latest

    # 如果需要运行集成测试，请保留以下 Postgres 服务
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # 测试和迁移时会用到
      DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter
      # 用于执行发布、上传资产
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # ────────────────────────────────────────────────────────────────────────
      # 1. 检出仓库代码
      # ────────────────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v3

      # ────────────────────────────────────────────────────────────────────────
      # 2. 设置 Rust 工具链
      # ────────────────────────────────────────────────────────────────────────
      - name: Set up Rust
        uses: actions/setup-rust@v3
        with:
          rust-version: stable

      # ────────────────────────────────────────────────────────────────────────
      # 3. 安装 sqlx-cli（仅在需要跑迁移时使用）
      # ────────────────────────────────────────────────────────────────────────
      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres

      # ────────────────────────────────────────────────────────────────────────
      # 4. 等待 Postgres 服务就绪（仅在集成测试场景）
      # ────────────────────────────────────────────────────────────────────────
      - name: Wait for Postgres to be ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -U postgres; then
              echo "Postgres is ready!"
              break
            else
              echo "Waiting for Postgres..."
              sleep 2
            fi
          done

      # ────────────────────────────────────────────────────────────────────────
      # 5. 创建数据库并运行迁移（仅在集成测试场景）
      # ────────────────────────────────────────────────────────────────────────
      - name: Create database & run migrations
        run: |
          sqlx database create || echo "database already exists"
          sqlx migrate run

      # ────────────────────────────────────────────────────────────────────────
      # 6. 运行测试（包括单元和集成测试）
      # ────────────────────────────────────────────────────────────────────────
      - name: Run tests
        run: cargo test --verbose

      # ────────────────────────────────────────────────────────────────────────
      # 7. 构建 Release 可执行文件
      # ────────────────────────────────────────────────────────────────────────
      - name: Build (release)
        run: cargo build --release

      # ────────────────────────────────────────────────────────────────────────
      # 8.（仅在 tag 推送时）打包可执行文件
      # ────────────────────────────────────────────────────────────────────────
      - name: Package binary
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p package
          cp target/release/zero2prod package/
          tar -czf zero2prod-${{ github.ref_name }}.tar.gz -C package zero2prod

      # ────────────────────────────────────────────────────────────────────────
      # 9.（仅在 tag 推送时）上传打包产物到 workflow Artifacts
      # ────────────────────────────────────────────────────────────────────────
      - name: Upload artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: zero2prod-${{ github.ref_name }}
          path: zero2prod-${{ github.ref_name }}.tar.gz

      # ────────────────────────────────────────────────────────────────────────
      # 10.（仅在 tag 推送时）创建 GitHub Release 并附加打包产物
      # ────────────────────────────────────────────────────────────────────────
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: zero2prod-${{ github.ref_name }}.tar.gz