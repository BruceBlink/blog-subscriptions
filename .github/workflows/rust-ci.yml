name: Rust CI & Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  linux:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres

      - name: Wait for Postgres
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -U postgres && break
            sleep 2
          done

      - name: Setup database
        run: |
          sqlx database create || echo "database already exists"
          sqlx migrate run

      - name: Run tests
        run: cargo test --verbose

      - name: Build release
        run: cargo build --release

      - name: Package Linux binary
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p dist
          cp target/release/zero2prod dist/
          tar -czf zero2prod-${{ github.ref_name }}-linux-x86_64.tar.gz -C dist zero2prod

      - name: Upload Linux release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: zero2prod-${{ github.ref_name }}-linux-x86_64.tar.gz

  windows:
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')

    # 修复：Windows服务配置语法修正
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~\.cargo\registry
            ~\.cargo\git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres

      - name: Wait for Postgres
        run: |
          $retries = 10
          $delay = 2
          $success = $false
          while ($retries -gt 0) {
            try {
              pg_isready -h localhost -U postgres
              if ($LASTEXITCODE -eq 0) {
                $success = $true
                break
              }
            } catch {
              # 忽略错误继续重试
            }
            Write-Host "Waiting for Postgres... (retries left: $retries)"
            $retries--
            Start-Sleep -Seconds $delay
          }
          if (-not $success) {
            Write-Error "Postgres is not ready after 10 retries."
            exit 1
          }

      - name: Setup database
        run: |
          sqlx database create || echo "database already exists"
          sqlx migrate run

      - name: Run tests
        run: cargo test --verbose

      - name: Build release
        run: cargo build --release

      - name: Package Windows binary
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item target\release\zero2prod.exe dist\
          Compress-Archive -Path dist\zero2prod.exe -DestinationPath zero2prod-${{ github.ref_name }}-windows-x86_64.zip

      - name: Upload Windows release
        uses: softprops/action-gh-release@v1
        with:
          files: zero2prod-${{ github.ref_name }}-windows-x86_64.zip

  mac:
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres

      - name: Wait for Postgres
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -U postgres && break
            sleep 2
          done

      - name: Setup database
        run: |
          sqlx database create || echo "database already exists"
          sqlx migrate run

      - name: Run tests
        run: cargo test --verbose

      - name: Build release
        run: cargo build --release

      - name: Package macOS binary
        run: |
          mkdir -p dist
          cp target/release/zero2prod dist/
          tar -czf zero2prod-${{ github.ref_name }}-macos-x86_64.tar.gz -C dist zero2prod

      - name: Upload macOS release
        uses: softprops/action-gh-release@v1
        with:
          files: zero2prod-${{ github.ref_name }}-macos-x86_64.tar.gz