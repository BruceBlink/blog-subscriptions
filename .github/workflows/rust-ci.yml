name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest

    # 声明一个 PostgreSQL 服务，用于运行集成测试
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # 全局环境变量，测试时会使用这条 URL 连接到上面那台 Postgres
    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # 1. 安装 sqlx-cli，用于执行迁移
      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres

      # 2. 等待 Postgres 就绪
      - name: Wait for Postgres to be ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -U postgres; then
              echo "Postgres is ready!"
              break
            else
              echo "Waiting for Postgres..."
              sleep 2
            fi
          done

      # 3. 创建数据库 & 运行迁移
      - name: Create database & run migrations
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter
        run: |
          # 如果数据库已存在则忽略错误
          sqlx database create || echo "database already exists"
          sqlx migrate run

      # 4. 运行测试（包括集成测试）
      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter
        run: cargo test --verbose

      # 5. 如果所有测试都通过，再进行 Release 打包
      - name: Build (release)
        run: cargo build --release

      # 6. 打包 Release 二进制
      - name: Package binary
        run: |
          mkdir -p package
          # 假设可执行文件名为 newsletter，位于 target/release/
          cp target/release/newsletter package/
          tar -czf newsletter.tar.gz -C package newsletter

      # 7. 上传打包产物
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: newsletter-binary
          path: newsletter.tar.gz