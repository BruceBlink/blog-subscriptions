name: Rust CI & Release

# 触发条件：推送到 main 分支 或 创建以 v 开头的 tag 时
on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build & Release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    # 仅在 tag 推送时运行
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cache_registry: ~/.cargo/registry
            cache_git:     ~/.cargo/git
            shell: bash
            ext: tar.gz
            target: linux-x86_64
          - os: windows-latest
            # Windows 下的路径要用引号包裹
            cache_registry: "C:\\Users\\runneradmin\\.cargo\\registry"
            cache_git:      "C:\\Users\\runneradmin\\.cargo\\git"
            shell: powershell
            ext: zip
            target: windows-x86_64
          - os: macos-latest
            cache_registry: ~/.cargo/registry
            cache_git:     ~/.cargo/git
            shell: bash
            ext: tar.gz
            target: macos-x86_64

    services:
      postgres:
        image: postgres:latest
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # ────────────────────────────────────────────────────────────────────────
      # 1. 检出仓库
      # ────────────────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v3

      # ────────────────────────────────────────────────────────────────────────
      # 2. 安装并缓存 Rust 工具链
      # ────────────────────────────────────────────────────────────────────────
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo registry & build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ${{ matrix.cache_registry }}
            ${{ matrix.cache_git }}
            target
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-

      # ────────────────────────────────────────────────────────────────────────
      # 3. 安装 sqlx-cli（用于数据库迁移）
      # ────────────────────────────────────────────────────────────────────────
      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres
        shell: ${{ matrix.shell }}

      # ────────────────────────────────────────────────────────────────────────
      # 4. 创建数据库并运行迁移
      # ────────────────────────────────────────────────────────────────────────
      - name: Create DB & Run migrations
        run: |
          sqlx database create || echo "database already exists"
          sqlx migrate run
        shell: ${{ matrix.shell }}

      # ────────────────────────────────────────────────────────────────────────
      # 5. 运行测试
      # ────────────────────────────────────────────────────────────────────────
      - name: Run tests
        run: cargo test --verbose
        shell: ${{ matrix.shell }}

      # ────────────────────────────────────────────────────────────────────────
      # 6. 构建 Release 可执行文件
      # ────────────────────────────────────────────────────────────────────────
      - name: Build (release)
        run: cargo build --release
        shell: ${{ matrix.shell }}

      # ────────────────────────────────────────────────────────────────────────
      # 7. 打包各平台可执行文件
      # ────────────────────────────────────────────────────────────────────────
      - name: Package (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item target\release\zero2prod.exe dist\
          Compress-Archive -Path dist\zero2prod.exe -DestinationPath zero2prod-${{ github.ref_name }}-${{ matrix.target }}.${{ matrix.ext }}
        shell: powershell

      - name: Package (Unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          mkdir -p dist
          cp target/release/zero2prod dist/
          chmod +x dist/zero2prod
          tar -czf zero2prod-${{ github.ref_name }}-${{ matrix.target }}.${{ matrix.ext }} -C dist zero2prod
        shell: bash

      # ────────────────────────────────────────────────────────────────────────
      # 8. 上传 Artifact 到 GitHub Release
      # ────────────────────────────────────────────────────────────────────────
      - name: Upload Artifact
        uses: softprops/action-gh-release@v1
        with:
          files: zero2prod-${{ github.ref_name }}-${{ matrix.target }}.${{ matrix.ext }}
