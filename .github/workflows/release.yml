name: Cross-platform Release with cross

# 触发条件：当推送到 main 分支或创建以 v 开头的 tag 时触发
on:
  push:
    branches:
      - main        # 推送到 main 分支时运行 CI（执行测试与构建）
    tags:
      - 'v*'         # 推送以 v 开头的 tag（如 v1.2.3）时运行 CI，也会触发发布

# 在所有步骤中启用彩色输出
env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # ────────────────────────────────────────────────────────────────────────
      # 1. 检出仓库代码
      # ────────────────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v3

      # ────────────────────────────────────────────────────────────────────────
      # 2. 缓存 Cargo registry 与编译产物
      #
      #  - ~/.cargo/registry      包含已下载的 crates.io 索引与 crate 源码
      #  - ~/.cargo/git           包含 Git 依赖缓存
      #  - target                  包含编译产物（debug、release、测试二进制等）
      #
      # 这里用 Cargo.lock 的哈希做 key，确保只有当锁文件变动时才重新拉依赖。
      # restore-keys 保证在锁文件未变时能命中旧缓存。
      # ────────────────────────────────────────────────────────────────────────
      - name: Cache Cargo registry and build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features postgres

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -U postgres; then
              echo "Postgres is ready!"
              break
            fi
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Run migrations
        run: |
          sqlx database create || echo "database already exists"
          sqlx migrate run

      - name: Run tests
        run: cargo test --verbose

      - name: Build custom cross image
        if: startsWith(github.ref, 'refs/tags/')
        run: docker build -f Dockerfile.cross -t custom-cross:latest .

      - name: Install cross
        if: startsWith(github.ref, 'refs/tags/')
        run: cargo install cross

      - name: Build (x86_64-unknown-linux-gnu)
        if: startsWith(github.ref, 'refs/tags/')
        run: cross build --release --target x86_64-unknown-linux-gnu

      - name: Build (x86_64-pc-windows-gnu)
        if: startsWith(github.ref, 'refs/tags/')
        run: cross build --release --target x86_64-pc-windows-gnu

      - name: Build (x86_64-apple-darwin)
        if: startsWith(github.ref, 'refs/tags/')
        run: cross build --release --target x86_64-apple-darwin

      - name: Package Binaries
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir dist
          cp target/x86_64-unknown-linux-gnu/release/zero2prod dist/zero2prod-linux
          cp target/x86_64-pc-windows-gnu/release/zero2prod.exe dist/zero2prod-windows.exe
          cp target/x86_64-apple-darwin/release/zero2prod dist/zero2prod-macos

          cd dist
          tar -czf zero2prod-${{ github.ref_name }}-linux.tar.gz zero2prod-linux
          zip zero2prod-${{ github.ref_name }}-windows.zip zero2prod-windows.exe
          tar -czf zero2prod-${{ github.ref_name }}-macos.tar.gz zero2prod-macos

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/zero2prod-${{ github.ref_name }}-linux.tar.gz
            dist/zero2prod-${{ github.ref_name }}-windows.zip
            dist/zero2prod-${{ github.ref_name }}-macos.tar.gz
