name: Cross-platform Release with cross

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newsletter
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter
      # 测试、迁移阶段连接数据库所用的环境变量
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo registry and build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install SQLx CLI (for migration)
        run: cargo install sqlx-cli --no-default-features --features postgres

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -U postgres && break
            sleep 2
          done

      - name: Run migrations
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          # 尝试创建数据库，若已存在则忽略错误
          sqlx database create || echo "database already exists"
          # 对新创建的库运行 migrations/ 目录下所有迁移脚本
          sqlx migrate run

      - name: Install cross
        run: cargo install cross

      - name: Build (x86_64-unknown-linux-gnu)
        run: cross build --release --target x86_64-unknown-linux-gnu

      - name: Build (x86_64-pc-windows-gnu)
        run: cross build --release --target x86_64-pc-windows-gnu

      - name: Build (x86_64-apple-darwin)
        run: cross build --release --target x86_64-apple-darwin

      - name: Package Binaries
        run: |
          mkdir dist
          cp target/x86_64-unknown-linux-gnu/release/zero2prod dist/zero2prod-linux
          cp target/x86_64-pc-windows-gnu/release/zero2prod.exe dist/zero2prod-windows.exe
          cp target/x86_64-apple-darwin/release/zero2prod dist/zero2prod-macos
          cd dist
          tar -czf zero2prod-${{ github.ref_name }}-linux.tar.gz zero2prod-linux
          zip zero2prod-${{ github.ref_name }}-windows.zip zero2prod-windows.exe
          tar -czf zero2prod-${{ github.ref_name }}-macos.tar.gz zero2prod-macos

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/zero2prod-${{ github.ref_name }}-linux.tar.gz
            dist/zero2prod-${{ github.ref_name }}-windows.zip
            dist/zero2prod-${{ github.ref_name }}-macos.tar.gz
