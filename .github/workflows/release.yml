name: Cross-platform Release with cross

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432
        # GitHub Actions 会等待此健康检查通过后才开始作业步骤
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU for cross-compilation
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Cargo registry and build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features postgres

      # 已移除自定义的 "Wait for Postgres" 脚本，因为 service health check 已足够

      - name: Run migrations
        run: |
          sqlx database create || echo "database already exists"
          sqlx migrate run

      - name: Run tests
        run: cargo test --verbose

      - name: Install cross
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cargo install cross
          # 验证安装
          cross --version

      - name: Build Linux target
        if: startsWith(github.ref, 'refs/tags/')
        run: cross build --release --target x86_64-unknown-linux-gnu

      - name: Build Windows target
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # 添加Windows构建所需依赖
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64
          cross build --release --target x86_64-pc-windows-gnu

      - name: Build macOS target
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # 添加macOS构建所需的主机依赖 (cross 可能需要主机上的 clang)
          # 注意: 成功的 macOS 交叉编译严重依赖于 cross 使用的 Docker 镜像中包含的 SDK。
          # 如果此步骤失败，请检查 cross 文档，考虑在 Cross.toml 中指定 macOS 镜像，
          # 或将 macOS 构建移至 macos-latest runner。
          sudo apt-get update
          sudo apt-get install -y clang llvm-dev libclang-dev libssl-dev
          cross build --release --target x86_64-apple-darwin

      - name: Package Binaries
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p dist
          # 假设您的可执行文件名为 zero2prod (根据 workflow 中的 cp 命令)
          # 如果您的项目可执行文件名不同，请相应修改这里的 'zero2prod'
          cp target/x86_64-unknown-linux-gnu/release/zero2prod dist/zero2prod-linux
          cp target/x86_64-pc-windows-gnu/release/zero2prod.exe dist/zero2prod-windows.exe
          cp target/x86_64-apple-darwin/release/zero2prod dist/zero2prod-macos
          
          cd dist
          tar -czf zero2prod-${{ github.ref_name }}-linux.tar.gz zero2prod-linux
          zip zero2prod-${{ github.ref_name }}-windows.zip zero2prod-windows.exe
          tar -czf zero2prod-${{ github.ref_name }}-macos.tar.gz zero2prod-macos

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/zero2prod-${{ github.ref_name }}-linux.tar.gz
            dist/zero2prod-${{ github.ref_name }}-windows.zip
            dist/zero2prod-${{ github.ref_name }}-macos.tar.gz